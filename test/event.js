let expect = require('expect.js');
let karas = require('../index');

describe('Event', function() {
  it('on && emit', function() {
    let event = new karas.Event();
    let count = 0;
    event.on('name', function() {
      count++;
    });
    event.emit('name');
    expect(count).to.eql(1);
  });
  it('on data', function() {
    let event = new karas.Event();
    let count = [];
    event.on('name', function(a, b) {
      count = [a, b];
    });
    event.emit('name', 1, 2);
    expect(count).to.eql([1, 2]);
  });
  it('emit count', function() {
    let event = new karas.Event();
    let count = 0;
    event.on('name', function() {
      count++;
    });
    event.emit('name');
    event.emit('name');
    event.emit('name');
    event.emit('name');
    event.emit('name2');
    event.emit('name3');
    expect(count).to.eql(4);
  });
  it('off', function() {
    let event = new karas.Event();
    let count = 0;
    function cb() {
      count++;
    }
    event.on('name', cb);
    event.off('name', cb);
    event.emit('name');
    expect(count).to.eql(0);
  });
  it('off no ref', function() {
    let event = new karas.Event();
    let count = 0;
    event.on('name', function() {
      count++;
    });
    event.off('name', function() {
      count++;
    });
    event.emit('name');
    expect(count).to.eql(1);
  });
  it('off no param', function() {
    let event = new karas.Event();
    let count = 0;
    event.on('name', function() {
      count++;
    });
    event.off('name');
    event.emit('name');
    expect(count).to.eql(0);
  });
  it('off arguments', function() {
    let event = new karas.Event();
    let count = 0;
    function cb() {
      count++;
      event.off('name', cb);
    }
    event.on('name', cb);
    event.emit('name');
    event.emit('name');
    event.emit('name');
    event.emit('name');
    expect(count).to.eql(1);
  });
  it('callback list is not altered during trigger', function() {
    let event = new karas.Event();
    let count = [0, 0, 0];
    function cb1() {
      count[1]++;
    }
    function cb2() {
      count[2]++;
    }
    event.on('name', function() {
      count[0]++;
      event.off('name');
    });
    event.on('name', cb1);
    event.on('name', cb2);
    event.emit('name');
    expect(count).to.eql([1, 1, 1]);
  });
  it('return self', function() {
    let event = new karas.Event();
    let count = 0;
    event.on('name', function() {
      count++;
    }).emit('name').off('name').emit('name');
    expect(count).to.eql(1);
  });
  it('on array', function() {
    let event = new karas.Event();
    let count = 0;
    event.on(['name', 'name2'], function() {
      count++;
    });
    event.emit('name');
    event.emit('name2');
    expect(count).to.eql(2);
  });
  it('emit array', function() {
    let event = new karas.Event();
    let count = 0;
    event.on('name', function() {
      count++;
    });
    event.on('name2', function() {
      count++;
    });
    event.emit(['name', 'name2']);
    expect(count).to.eql(2);
  });
  it('off array', function() {
    let event = new karas.Event();
    let count = 0;
    event.on('name', function() {
      count++;
    });
    event.on('name2', function() {
      count++;
    });
    event.off(['name', 'name2']);
    event.emit(['name', 'name2']);
    expect(count).to.eql(0);
  });
  it('once', function() {
    let event = new karas.Event();
    let count = 0;
    event.once('name', function() {
      count++;
    });
    event.emit('name');
    event.emit('name');
    event.emit('name');
    expect(count).to.eql(1);
  });
  it('once array but emit only 1', function() {
    let event = new karas.Event();
    let count = 0;
    event.once(['name', 'name2'], function() {
      count++;
    });
    event.emit('name');
    event.emit('name');
    event.emit('name');
    expect(count).to.eql(1);
  });
  it('once array', function() {
    let event = new karas.Event();
    let count = 0;
    event.once(['name', 'name2'], function() {
      count++;
    });
    event.emit('name');
    event.emit('name2');
    event.emit('name');
    event.emit('name2');
    expect(count).to.eql(2);
  });
  it('mix', function() {
    let event = {};
    karas.Event.mix(event);
    let count = 0;
    event.on('name', function() {
      count++;
    });
    event.emit('name');
    event.emit('name');
    event.off('name');
    event.emit('name');
    expect(count).to.eql(2);
  });
});

const booleanOperations = karas.math.booleanOperations;

describe('Boolean Operations', function() {
  it('normal', function() {
    let p1 = [
      [100, 10],
      [50, 10],
      [50, 60],
      [100, 60],
      [100, 10],
    ];
    let p2 = [
      [80, 40],
      [150, 40],
      [150, 100],
      [80, 100],
      [80, 40],
    ];
    let res1 = booleanOperations.intersect(p1, p2);
    let res2 = booleanOperations.union(p1, p2);
    let res3 = booleanOperations.subtract(p1, p2);
    let res4 = booleanOperations.subtractRev(p1, p2);
    let res5 = booleanOperations.xor(p1, p2);
    expect(res1).to.eql([[[100,40],[80,40],[80,60],[100,60],[100,40]]]);
    expect(res2).to.eql([[[50,60],[50,10],[100,10],[100,40],[150,40],[150,100],[80,100],[80,60],[50,60]]]);
    expect(res3).to.eql([[[50,60],[50,10],[100,10],[100,40],[80,40],[80,60],[50,60]]]);
    expect(res4).to.eql([[[80,100],[80,60],[100,60],[100,40],[150,40],[150,100],[80,100]]]);
    expect(res5).to.eql([[[100,40],[80,40],[80,60],[100,60],[100,40]],[[50,60],[50,10],[100,10],[100,40],[150,40],[150,100],[80,100],[80,60],[50,60]]]);
  });
  it('self intersect', function() {
    let p1 = [
      [0, 0],
      [100, 0],
      [0, 100],
      [100, 100],
      [0, 0],
    ];
    let p2 = [
      [80, 70],
      [120, 70],
      [120, 120],
      [80, 120],
      [80, 70],
    ];
    let res1 = booleanOperations.intersect(p1, p2);
    let res2 = booleanOperations.union(p1, p2);
    let res3 = booleanOperations.subtract(p1, p2);
    let res4 = booleanOperations.subtractRev(p1, p2);
    let res5 = booleanOperations.xor(p1, p2);
    expect(res1).to.eql([[[80,100],[80,80],[100,100],[80,100]]]);
    expect(res2).to.eql([[[50,50],[0,100],[80,100],[80,120],[120,120],[120,70],[80,70],[80,80],[50,50],[100,0],[0,0],[50,50]]]);
    expect(res3).to.eql([[[50,50],[0,100],[80,100],[80,80],[50,50],[100,0],[0,0],[50,50]]]);
    expect(res4).to.eql([[[80,120],[80,100],[100,100],[80,80],[80,70],[120,70],[120,120],[80,120]]]);
    expect(res5).to.eql([[[80,100],[80,80],[100,100],[80,100]],[[50,50],[0,100],[80,100],[80,120],[120,120],[120,70],[80,70],[80,80],[50,50],[100,0],[0,0],[50,50]]]);
  });
  it('non-monotone curve', function() {
    let p1 = [
      [100, 10],
      [-30, 30, 50, 100],
      [40, 50],
      [120, 60],
      [100, 10],
    ];
    let p2 = [
      [80, 40],
      [150, 40],
      [150, 100],
      [80, 100],
      [80, 40],
    ];
    let res1 = booleanOperations.intersect(p1, p2);
    let res2 = booleanOperations.union(p1, p2);
    let res3 = booleanOperations.subtract(p1, p2);
    let res4 = booleanOperations.subtractRev(p1, p2);
    let res5 = booleanOperations.xor(p1, p2);
    expect(res1).to.eql([[[112,40],[120,60],[80,55],[80,40],[112,40]]]);
    expect(res2).to.eql([[[50,100],[19.523809523809526,73.33333333333334,19.523809523809522,53.92290249433107],[19.52380952380952,22.38095238095238,100,10],[112,40],[150,40],[150,100],[80,100],[80,55],[40,50],[50,100]]]);
    expect(res3).to.eql([[[50,100],[19.523809523809526,73.33333333333334,19.523809523809522,53.92290249433107],[19.52380952380952,22.38095238095238,100,10],[112,40],[80,40],[80,55],[40,50],[50,100]]]);
    expect(res4).to.eql([[[80,100],[80,55],[120,60],[112,40],[150,40],[150,100],[80,100]]]);
    expect(res5).to.eql([[[112,40],[120,60],[80,55],[80,40],[112,40]],[[50,100],[40,50],[80,55],[80,100],[150,100],[150,40],[112,40],[100,10],[19.52380952380952,22.38095238095238,19.523809523809522,53.92290249433107],[19.523809523809526,73.33333333333334,50,100]]]);
  });
  it('bezier2 intersect', function() {
    let p1 = [
      [10, 10],
      [150, 55, 10, 100],
      [10, 10],
    ];
    let p2 = [
      [100, 10],
      [0, 55, 100, 100],
      [100, 10],
    ];
    let res1 = booleanOperations.intersect(p1, p2);
    let res2 = booleanOperations.union(p1, p2);
    let res3 = booleanOperations.subtract(p1, p2);
    let res4 = booleanOperations.subtractRev(p1, p2);
    let res5 = booleanOperations.xor(p1, p2);
    expect(res1).to.eql([[[62.5,77.5],[50,66.25,50,55],[50,43.75,62.5,32.5],[80,43.75,80,55],[80,66.25,62.5,77.5]]]);
    expect(res2).to.eql([[[10,100],[10,10],[45,21.25,62.5,32.5],[75,21.25,100,10],[100,100],[75,88.75,62.5,77.5],[45,88.75,10,100]]]);
    expect(res3).to.eql([[[10,100],[45,88.75,62.5,77.5],[50,66.25,50,55],[50,43.75,62.5,32.5],[45,21.25,10,10],[10,100]]]);
    expect(res4).to.eql([[[100,10],[100,100],[75,88.75,62.5,77.5],[80,66.25,80,55],[80,43.75,62.5,32.5],[75,21.25,100,10]]]);
    expect(res5).to.eql([[[62.5,77.5],[50,66.25,50,55],[50,43.75,62.5,32.5],[80,43.75,80,55],[80,66.25,62.5,77.5]],[[10,100],[45,88.75,62.5,77.5],[75,88.75,100,100],[100,10],[75,21.25,62.5,32.5],[45,21.25,10,10],[10,100]]]);
  });
  it('monotone curve', function() {
    let p1 = [
      [10, 10],
      [10, 100],
      [100, 100],
      [100, 10],
      [10, 10],
    ];
    let p2 = [
      [50, 50],
      [100, 100, 150, 50],
      [50, 50],
    ];
    let res1 = booleanOperations.intersect(p1, p2);
    let res2 = booleanOperations.union(p1, p2);
    let res3 = booleanOperations.subtract(p1, p2);
    let res4 = booleanOperations.subtractRev(p1, p2);
    let res5 = booleanOperations.xor(p1, p2);
    expect(res1).to.eql([[[100,75],[75,75,50,50],[100,50],[100,75]]]);
    expect(res2).to.eql([[[10,100],[10,10],[100,10],[100,50],[150,50],[125,75,100,75],[100,100],[10,100]]]);
    expect(res3).to.eql([[[10,100],[100,100],[100,75],[75,75,50,50],[100,50],[100,10],[10,10],[10,100]]]);
    expect(res4).to.eql([[[150,50],[100,50],[100,75],[125,75,150,50]]]);
    expect(res5).to.eql([[[100,75],[75,75,50,50],[100,50],[100,75]],[[10,100],[100,100],[100,75],[125,75,150,50],[100,50],[100,10],[10,10],[10,100]]]);
  });
  it('bezier3 curve', function() {
    let p1 = [
      [50, 10],
      [20, 30, 70, 70, 50, 100],
      [100, 100],
      [100, 10],
      [50, 10],
    ];
    let p2 = [
      [120, 20],
      [70, 120],
      [120, 120],
      [120, 20],
    ];
    let res1 = booleanOperations.intersect(p1, p2);
    let res2 = booleanOperations.union(p1, p2);
    let res3 = booleanOperations.subtract(p1, p2);
    let res4 = booleanOperations.subtractRev(p1, p2);
    let res5 = booleanOperations.xor(p1, p2);
    expect(res1).to.eql([[[100,60],[80,100],[100,100],[100,60]]]);
    expect(res2).to.eql([[[50,10],[100,10],[100,60],[120,20],[120,120],[70,120],[80,100],[50,100],[53.5214680752791,94.71779788708135,54.87280710464647,89.12557733903245,54.87280710464647,83.38709635916217],[54.87280710464647,64.44540640034025,40.14941511757575,43.910149155215294,40.14941511757575,27.670681418615608],[40.14941511757575,20.888057653078135,42.717797887081346,14.854801408612435,50,10]]]);
    expect(res3).to.eql([[[50,10],[42.717797887081346,14.854801408612435,40.14941511757575,20.888057653078135,40.14941511757575,27.670681418615608],[40.14941511757575,43.910149155215294,54.87280710464647,64.44540640034025,54.87280710464647,83.38709635916217],[54.87280710464647,89.12557733903245,53.5214680752791,94.71779788708135,50,100],[80,100],[100,60],[100,10],[50,10]]]);
    expect(res4).to.eql([[[80,100],[100,100],[100,60],[120,20],[120,120],[70,120],[80,100]]]);
    expect(res5).to.eql([[[100,60],[80,100],[100,100],[100,60]],[[50,10],[100,10],[100,60],[120,20],[120,120],[70,120],[80,100],[50,100],[53.5214680752791,94.71779788708135,54.87280710464647,89.12557733903245,54.87280710464647,83.38709635916217],[54.87280710464647,64.44540640034025,40.14941511757575,43.910149155215294,40.14941511757575,27.670681418615608],[40.14941511757575,20.888057653078135,42.717797887081346,14.854801408612435,50,10]]]);
  });
  it('bezier3 monotone intersect', function() {
    let p1 = [
      [10, 50],
      [30, 30, 80, 30, 100, 50],
      [100, 100],
      [10, 100],
      [10, 50],
    ];
    let p2 = [
      [120, 20],
      [70, 20],
      [70, 70],
      [120, 70],
      [120, 20],
    ];
    let res1 = booleanOperations.intersect(p1, p2);
    let res2 = booleanOperations.union(p1, p2);
    let res3 = booleanOperations.subtract(p1, p2);
    let res4 = booleanOperations.subtractRev(p1, p2);
    let res5 = booleanOperations.xor(p1, p2);
    expect(res1).to.eql([[[100,70],[70,70],[70,36.25427672382543],[81.99376076377814,38.30977770575824,92.8916854644831,42.8916854644831,100,50],[100,70]]]);
    expect(res2).to.eql([[[10,100],[10,50],[22.8916854644831,37.1083145355169,48.24803748760356,32.526406776792044,70,36.25427672382543],[70,20],[120,20],[120,70],[100,70],[100,100],[10,100]]]);
    expect(res3).to.eql([[[10,100],[10,50],[22.8916854644831,37.1083145355169,48.24803748760356,32.526406776792044,70,36.25427672382543],[70,70],[100,70],[100,100],[10,100]]]);
    expect(res4).to.eql([[[70,36.25427672382543],[70,20],[120,20],[120,70],[100,70],[100,50],[92.8916854644831,42.8916854644831,81.99376076377814,38.30977770575824,70,36.25427672382543]]]);
    expect(res5).to.eql([[[100,70],[70,70],[70,36.25427672382543],[81.99376076377814,38.30977770575824,92.8916854644831,42.8916854644831,100,50],[100,70]],[[10,100],[100,100],[100,70],[120,70],[120,20],[70,20],[70,36.25427672382543],[48.24803748760356,32.526406776792044,22.8916854644831,37.1083145355169,10,50],[10,100]]]);
  });
  it('bezier3 non-monotone intersect', function() {
    let p1 = [
      [50, 10],
      [20, 30, 70, 70, 50, 100],
      [100, 100],
      [100, 10],
      [50, 10],
    ];
    let p2 = [
      [120, 70],
      [40, 70],
      [40, 120],
      [120, 120],
      [120, 70],
    ];
    let res1 = booleanOperations.intersect(p1, p2);
    let res2 = booleanOperations.union(p1, p2);
    let res3 = booleanOperations.subtract(p1, p2);
    let res4 = booleanOperations.subtractRev(p1, p2);
    let res5 = booleanOperations.xor(p1, p2);
    expect(res1).to.eql([[[100,69.99999999999999],[52.85770246234396,69.99999999999999],[54.07799270477021,74.49914602051706,54.87280710464647,78.98613404405954,54.87280710464647,83.38709635916217],[54.87280710464647,89.12557733903245,53.5214680752791,94.71779788708135,50,100],[100,100],[100,69.99999999999999]]]);
    expect(res2).to.eql([[[50,10],[100,10],[100,69.99999999999999],[120,70],[120,120],[40,120],[40,70],[52.85770246234396,69.99999999999999],[48.82587787695336,55.134874550240994,40.14941511757575,40.13702829422189,40.14941511757575,27.670681418615608],[40.14941511757575,20.888057653078135,42.717797887081346,14.854801408612435,50,10]]]);
    expect(res3).to.eql([[[50,10],[42.717797887081346,14.854801408612435,40.14941511757575,20.888057653078135,40.14941511757575,27.670681418615608],[40.14941511757575,40.13702829422189,48.82587787695336,55.134874550240994,52.85770246234396,69.99999999999999],[100,69.99999999999999],[100,10],[50,10]]]);
    expect(res4).to.eql([[[40,120],[40,70],[52.85770246234396,69.99999999999999],[54.07799270477021,74.49914602051706,54.87280710464647,78.98613404405954,54.87280710464647,83.38709635916217],[54.87280710464647,89.12557733903245,53.5214680752791,94.71779788708135,50,100],[100,100],[100,69.99999999999999],[120,70],[120,120],[40,120]]]);
    expect(res5).to.eql([[[100,69.99999999999999],[52.85770246234396,69.99999999999999],[54.07799270477021,74.49914602051706,54.87280710464647,78.98613404405954,54.87280710464647,83.38709635916217],[54.87280710464647,89.12557733903245,53.5214680752791,94.71779788708135,50,100],[100,100],[100,69.99999999999999]],[[50,10],[100,10],[100,69.99999999999999],[120,70],[120,120],[40,120],[40,70],[52.85770246234396,69.99999999999999],[48.82587787695336,55.134874550240994,40.14941511757575,40.13702829422189,40.14941511757575,27.670681418615608],[40.14941511757575,20.888057653078135,42.717797887081346,14.854801408612435,50,10]]]);
  });
  it('bezier3 non-monotone intersect two point', function() {
    let p1 = [
      [50, 10],
      [20, 30, 70, 70, 50, 100],
      [100, 100],
      [100, 10],
      [50, 10],
    ];
    let p2 = [
      [120, 20],
      [50, 20],
      [35, 70],
      [120, 70],
      [120, 20],
    ];
    let res1 = booleanOperations.intersect(p1, p2);
    let res2 = booleanOperations.union(p1, p2);
    let res3 = booleanOperations.subtract(p1, p2);
    let res4 = booleanOperations.subtractRev(p1, p2);
    let res5 = booleanOperations.xor(p1, p2);
    expect(res1).to.eql([[[100,70],[52.85770246234397,70.00000000000001],[50.353889315656026,60.768572456466046,46.05884160610192,51.48596028100187,43.16292879050817,42.790237364972775],[50,20],[100,20],[100,70]]]);
    expect(res2).to.eql([[[43.16292879050817,42.790237364972775],[41.395629216430024,37.48346593074752,40.14941511757575,32.39527204038644,40.14941511757575,27.670681418615608],[40.14941511757575,20.888057653078135,42.717797887081346,14.854801408612435,50,10],[100,10],[100,20],[120,20],[120,70],[100,70],[100,100],[50,100],[53.5214680752791,94.71779788708135,54.87280710464647,89.12557733903245,54.87280710464647,83.38709635916217],[54.87280710464647,78.98613404405955,54.07799270477022,74.49914602051709,52.85770246234397,70.00000000000001],[35,70],[43.16292879050817,42.790237364972775]]]);
    expect(res3).to.eql([[[54.87280710464647,83.38709635916217],[54.87280710464647,78.98613404405955,54.07799270477022,74.49914602051709,52.85770246234397,70.00000000000001],[100,70],[100,100],[50,100],[53.5214680752791,94.71779788708135,54.87280710464647,89.12557733903245,54.87280710464647,83.38709635916217]],[[43.16292879050817,42.790237364972775],[50,20],[100,20],[100,10],[50,10],[42.717797887081346,14.854801408612435,40.14941511757575,20.888057653078135,40.14941511757575,27.670681418615608],[40.14941511757575,32.39527204038644,41.395629216430024,37.48346593074752,43.16292879050817,42.790237364972775]]]);
    expect(res4).to.eql([[[120,70],[100,70],[100,20],[120,20],[120,70]],[[43.16292879050817,42.790237364972775],[46.05884160610192,51.48596028100187,50.353889315656026,60.768572456466046,52.85770246234397,70.00000000000001],[35,70],[43.16292879050817,42.790237364972775]]]);
    expect(res5).to.eql([[[100,70],[52.85770246234397,70.00000000000001],[50.353889315656026,60.768572456466046,46.05884160610192,51.48596028100187,43.16292879050817,42.790237364972775],[50,20],[100,20],[100,70]],[[43.16292879050817,42.790237364972775],[35,70],[52.85770246234397,70.00000000000001],[54.07799270477022,74.49914602051709,54.87280710464647,78.98613404405955,54.87280710464647,83.38709635916217],[54.87280710464647,89.12557733903245,53.5214680752791,94.71779788708135,50,100],[100,100],[100,70],[120,70],[120,20],[100,20],[100,10],[50,10],[42.717797887081346,14.854801408612435,40.14941511757575,20.888057653078135,40.14941511757575,27.670681418615608],[40.14941511757575,32.39527204038644,41.395629216430024,37.48346593074752,43.16292879050817,42.790237364972775]]]);
  });
  it('bezier3 intersect bezier2', function() {
    let p1 = [
      [10, 10],
      [150, 30, 150, 80, 10, 100],
      [10, 10],
    ];
    let p2 = [
      [100, 10],
      [0, 55, 100, 100],
      [100, 10],
    ];
    let res1 = booleanOperations.intersect(p1, p2);
    let res2 = booleanOperations.union(p1, p2);
    let res3 = booleanOperations.subtract(p1, p2);
    let res4 = booleanOperations.subtractRev(p1, p2);
    let res5 = booleanOperations.xor(p1, p2);
    expect(res1).to.eql([[[100,74.43817289761739],[93.42613083419971,78.52016196063998,84.69147387794644,82.42714366255471,73.79602913124018,86.04407045386408],[50,70.52207444105996,50,55],[50,39.47792555894004,73.79602913124018,23.955929546135913],[84.69147387794644,27.57285633744528,93.42613083419971,31.479838039360008,100,35.561827102382594],[100,74.43817289761739]]]);
    expect(res2).to.eql([[[10,100],[10,10],[36.1496639251709,13.735666275024414,57.41500696891762,18.517972738925437,73.79602913124018,23.955929546135913],[84.49349875791101,16.977925558940044,100,10],[100,35.561827102382594],[110,41.77124344467704,115,48.38562172233852,115,55],[115,61.61437827766147,110,68.22875655532295,100,74.43817289761739],[100,100],[84.49349875791101,93.02207444105996,73.79602913124018,86.04407045386408],[57.41500696891762,91.48202726107456,36.1496639251709,96.26433372497559,10,100]]]);
    expect(res3).to.eql([[[115,55],[115,48.38562172233852,110,41.77124344467704,100,35.561827102382594],[100,74.43817289761739],[110,68.22875655532295,115,61.61437827766147,115,55]],[[10,100],[36.1496639251709,96.26433372497559,57.41500696891762,91.48202726107456,73.79602913124018,86.04407045386408],[50,70.52207444105996,50,55],[50,39.47792555894004,73.79602913124018,23.955929546135913],[57.41500696891762,18.517972738925437,36.1496639251709,13.735666275024414,10,10],[10,100]]]);
    expect(res4).to.eql([[[100,100],[84.49349875791101,93.02207444105996,73.79602913124018,86.04407045386408],[84.69147387794644,82.42714366255471,93.42613083419971,78.52016196063998,100,74.43817289761739],[100,100]],[[100,10],[84.49349875791101,16.977925558940044,73.79602913124018,23.955929546135913],[84.69147387794644,27.57285633744528,93.42613083419971,31.479838039360008,100,35.561827102382594],[100,10]]]);
    expect(res5).to.eql([[[100,74.43817289761739],[93.42613083419971,78.52016196063998,84.69147387794644,82.42714366255471,73.79602913124018,86.04407045386408],[50,70.52207444105996,50,55],[50,39.47792555894004,73.79602913124018,23.955929546135913],[84.69147387794644,27.57285633744528,93.42613083419971,31.479838039360008,100,35.561827102382594],[100,74.43817289761739]],[[10,100],[36.1496639251709,96.26433372497559,57.41500696891762,91.48202726107456,73.79602913124018,86.04407045386408],[84.49349875791101,93.02207444105996,100,100],[100,74.43817289761739],[110,68.22875655532295,115,61.61437827766147,115,55],[115,48.38562172233852,110,41.77124344467704,100,35.561827102382594],[100,10],[84.49349875791101,16.977925558940044,73.79602913124018,23.955929546135913],[57.41500696891762,18.517972738925437,36.1496639251709,13.735666275024414,10,10],[10,100]]]);
  });
  it('bezier3 intersect bezier3', function() {
    let p1 = [
      [10, 10],
      [100, 30, 100, 80, 10, 100],
      [10, 10],
    ];
    let p2 = [
      [100, 10],
      [0, 30, 0, 80, 100, 100],
      [100, 10],
    ];
    let res1 = booleanOperations.intersect(p1, p2);
    let res2 = booleanOperations.union(p1, p2);
    let res3 = booleanOperations.subtract(p1, p2);
    let res4 = booleanOperations.subtractRev(p1, p2);
    let res5 = booleanOperations.xor(p1, p2);
    expect(res1).to.eql([[[52.631617425024615,85.18909738942767],[34.21053914167487,76.2442090448684,25,65.6221045224342,25,55],[25,44.377895477565794,34.21053914167487,33.75579095513159,52.631617425024615,24.810902610572327],[69.21053914167487,33.75582218170166,77.5,44.37791109085083,77.5,55],[77.5,65.62208890914917,69.21053914167487,76.24417781829834,52.631617425024615,85.18909738942767]]]);
    expect(res2).to.eql([[[10,100],[10,10],[27.686057090759274,13.930234909057617,41.89659623243414,19.01897580114337,52.631617425024615,24.810902610572327],[64.5594092057726,19.018952697634052,80.34887006409772,13.930225987180455,100,10],[100,100],[80.34887006409772,96.06977401281955,64.5594092057726,90.98104730236595,52.631617425024615,85.18909738942767],[41.89659623243414,90.98102419885663,27.686057090759274,96.06976509094238,10,100]]]);
    expect(res3).to.eql([[[10,100],[27.686057090759274,96.06976509094238,41.89659623243414,90.98102419885663,52.631617425024615,85.18909738942767],[34.21053914167487,76.2442090448684,25,65.6221045224342,25,55],[25,44.377895477565794,34.21053914167487,33.75579095513159,52.631617425024615,24.810902610572327],[41.89659623243414,19.01897580114337,27.686057090759274,13.930234909057617,10,10],[10,100]]]);
    expect(res4).to.eql([[[100,10],[100,100],[80.34887006409772,96.06977401281955,64.5594092057726,90.98104730236595,52.631617425024615,85.18909738942767],[69.21053914167487,76.24417781829834,77.5,65.62208890914917,77.5,55],[77.5,44.37791109085083,69.21053914167487,33.75582218170166,52.631617425024615,24.810902610572327],[64.5594092057726,19.018952697634052,80.34887006409772,13.930225987180455,100,10]]]);
    expect(res5).to.eql([[[52.631617425024615,85.18909738942767],[34.21053914167487,76.2442090448684,25,65.6221045224342,25,55],[25,44.377895477565794,34.21053914167487,33.75579095513159,52.631617425024615,24.810902610572327],[69.21053914167487,33.75582218170166,77.5,44.37791109085083,77.5,55],[77.5,65.62208890914917,69.21053914167487,76.24417781829834,52.631617425024615,85.18909738942767]],[[10,100],[27.686057090759274,96.06976509094238,41.89659623243414,90.98102419885663,52.631617425024615,85.18909738942767],[64.5594092057726,90.98104730236595,80.34887006409772,96.06977401281955,100,100],[100,10],[80.34887006409772,13.930225987180455,64.5594092057726,19.018952697634052,52.631617425024615,24.810902610572327],[41.89659623243414,19.01897580114337,27.686057090759274,13.930234909057617,10,10],[10,100]]]);
  });
  it('line partial overlap', function() {
    let p1 = [
      [100, 10],
      [50, 10],
      [50, 60],
      [100, 60],
      [100, 10],
    ];
    let p2 = [
      [80, 60],
      [120, 60],
      [120, 150],
      [80, 150],
      [80, 60],
    ];
    let res1 = booleanOperations.intersect(p1, p2);
    let res2 = booleanOperations.union(p1, p2);
    let res3 = booleanOperations.subtract(p1, p2);
    let res4 = booleanOperations.subtractRev(p1, p2);
    let res5 = booleanOperations.xor(p1, p2);
    expect(res1).to.eql([]);
    expect(res2).to.eql([[[50,60],[50,10],[100,10],[100,60],[120,60],[120,150],[80,150],[80,60],[50,60]]]);
    expect(res3).to.eql([[[50,60],[50,10],[100,10],[100,60],[80,60],[50,60]]]);
    expect(res4).to.eql([[[100,60],[120,60],[120,150],[80,150],[80,60],[100,60]]]);
    expect(res5).to.eql([[[50,60],[50,10],[100,10],[100,60],[120,60],[120,150],[80,150],[80,60],[50,60]]]);
  });
  it('line contain overlap', function() {
    let p1 = [
      [100, 10],
      [50, 10],
      [50, 60],
      [100, 60],
      [100, 10],
    ];
    let p2 = [
      [50, 60],
      [120, 60],
      [120, 150],
      [80, 150],
      [50, 60],
    ];
    let res1 = booleanOperations.intersect(p1, p2);
    let res2 = booleanOperations.union(p1, p2);
    let res3 = booleanOperations.subtract(p1, p2);
    let res4 = booleanOperations.subtractRev(p1, p2);
    let res5 = booleanOperations.xor(p1, p2);
    expect(res1).to.eql([]);
    expect(res2).to.eql([[[50,60],[50,10],[100,10],[100,60],[120,60],[120,150],[80,150],[50,60]]]);
    expect(res3).to.eql([[[50,60],[50,10],[100,10],[100,60],[50,60]]]);
    expect(res4).to.eql([[[100,60],[120,60],[120,150],[80,150],[50,60],[100,60]]]);
    expect(res5).to.eql([[[50,60],[50,10],[100,10],[100,60],[120,60],[120,150],[80,150],[50,60]]]);
  });
  it('line equal', function() {
    let p1 = [
      [100, 10],
      [50, 10],
      [50, 60],
      [100, 60],
      [100, 10],
    ];
    let p2 = [
      [50, 60],
      [100, 60],
      [120, 150],
      [80, 150],
      [50, 60],
    ];
    let res1 = booleanOperations.intersect(p1, p2);
    let res2 = booleanOperations.union(p1, p2);
    let res3 = booleanOperations.subtract(p1, p2);
    let res4 = booleanOperations.subtractRev(p1, p2);
    let res5 = booleanOperations.xor(p1, p2);
    expect(res1).to.eql([]);
    expect(res2).to.eql([[[50,60],[80,150],[120,150],[100,60],[100,10],[50,10],[50,60]]]);
    expect(res3).to.eql([[[50,60],[50,10],[100,10],[100,60],[50,60]]]);
    expect(res4).to.eql([[[100,60],[50,60],[80,150],[120,150],[100,60]]]);
    expect(res5).to.eql([[[50,60],[80,150],[120,150],[100,60],[100,10],[50,10],[50,60]]]);
  });
  it('line partial overlap vertical', function() {
    let p1 = [
      [100, 10],
      [50, 10],
      [50, 60],
      [100, 60],
      [100, 10],
    ];
    let p2 = [
      [100, 40],
      [150, 40],
      [150, 100],
      [100, 100],
      [100, 40],
    ];
    let res1 = booleanOperations.intersect(p1, p2);
    let res2 = booleanOperations.union(p1, p2);
    let res3 = booleanOperations.subtract(p1, p2);
    let res4 = booleanOperations.subtractRev(p1, p2);
    let res5 = booleanOperations.xor(p1, p2);
    expect(res1).to.eql([]);
    expect(res2).to.eql([[[50,60],[50,10],[100,10],[100,40],[150,40],[150,100],[100,100],[100,60],[50,60]]]);
    expect(res3).to.eql([[[50,60],[50,10],[100,10],[100,40],[100,60],[50,60]]]);
    expect(res4).to.eql([[[100,60],[100,40],[150,40],[150,100],[100,100],[100,60]]]);
    expect(res5).to.eql([[[50,60],[50,10],[100,10],[100,40],[150,40],[150,100],[100,100],[100,60],[50,60]]]);
  });
  it('line equal same direction', function() {
    let p1 = [
      [100, 10],
      [50, 10],
      [50, 60],
      [100, 10],
    ];
    let p2 = [
      [50, 10],
      [100, 10],
      [100, 60],
      [50, 10],
    ];
    let res1 = booleanOperations.intersect(p1, p2);
    let res2 = booleanOperations.union(p1, p2);
    let res3 = booleanOperations.subtract(p1, p2);
    let res4 = booleanOperations.subtractRev(p1, p2);
    let res5 = booleanOperations.xor(p1, p2);
    expect(res1).to.eql([[[100,10],[50,10],[75,35],[100,10]]]);
    expect(res2).to.eql([[[50,60],[50,10],[100,10],[100,60],[75,35],[50,60]]]);
    expect(res3).to.eql([[[50,60],[50,10],[75,35],[50,60]]]);
    expect(res4).to.eql([[[100,60],[75,35],[100,10],[100,60]]]);
    expect(res5).to.eql([[[50,60],[50,10],[75,35],[100,10],[100,60],[75,35],[50,60]]]);
  });
  it('self intersection force even-odd', function() {
    let p1 = [
      [100, 10],
      [50, 10],
      [50, 60],
      [100, 10],
      [50, 10],
      [100, 60],
      [100, 10],
    ];
    let p2 = [
      [100, 10],
      [150, 10],
      [125, 60],
      [100, 10],
    ];
    let res1 = booleanOperations.intersect(p1, p2);
    let res2 = booleanOperations.union(p1, p2);
    let res3 = booleanOperations.subtract(p1, p2);
    let res4 = booleanOperations.subtractRev(p1, p2);
    let res5 = booleanOperations.xor(p1, p2);
    expect(res1).to.eql([]);
    expect(res2).to.eql([[[125,60],[150,10],[100,10],[125,60]],[[100,60],[75,35],[100,10],[100,60]],[[50,60],[75,35],[50,10],[50,60]]]);
    expect(res3).to.eql([[[100,60],[75,35],[100,10],[100,60]],[[50,60],[75,35],[50,10],[50,60]]]);
    expect(res4).to.eql([[[125,60],[150,10],[100,10],[125,60]]]);
    expect(res5).to.eql([[[125,60],[150,10],[100,10],[125,60]],[[100,60],[75,35],[100,10],[100,60]],[[50,60],[75,35],[50,10],[50,60]]]);
  });
  it('self intersection force even-odd intersect other', function() {
    let p1 = [
      [100, 10],
      [50, 10],
      [50, 60],
      [90, 10],
      [60, 10],
      [100, 60],
      [100, 10],
    ];
    let p2 = [
      [90, 20],
      [150, 10],
      [125, 60],
      [90, 20],
    ];
    let res1 = booleanOperations.intersect(p1, p2);
    let res2 = booleanOperations.union(p1, p2);
    let res3 = booleanOperations.subtract(p1, p2);
    let res4 = booleanOperations.subtractRev(p1, p2);
    let res5 = booleanOperations.xor(p1, p2);
    expect(res1).to.eql([[[100,18.333333333333336],[100,31.428571428571427],[90,20],[100,18.333333333333336]]]);
    expect(res2).to.eql([[[90,10],[75,28.75],[100,60],[100,31.428571428571427],[125,60],[150,10],[100,18.333333333333336],[100,10],[90,10]],[[50,60],[75,28.75],[60,10],[50,10],[50,60]]]);
    expect(res3).to.eql([[[90,10],[100,10],[100,18.333333333333336],[90,20],[100,31.428571428571427],[100,60],[75,28.75],[90,10]],[[50,60],[75,28.75],[60,10],[50,10],[50,60]]]);
    expect(res4).to.eql([[[125,60],[150,10],[100,18.333333333333336],[100,31.428571428571427],[125,60]]]);
    expect(res5).to.eql([[[100,18.333333333333336],[100,31.428571428571427],[90,20],[100,18.333333333333336]],[[90,10],[75,28.75],[100,60],[100,31.428571428571427],[125,60],[150,10],[100,18.333333333333336],[100,10],[90,10]],[[50,60],[75,28.75],[60,10],[50,10],[50,60]]]);
  });
  it('bezier2 equal', function() {
    let p1 = [
      [100, 10],
      [80, 30, 50, 10],
      [50, 60],
      [100, 10],
    ];
    let p2 = [
      [50, 10],
      [80, 30, 100, 10],
      [100, 60],
      [50, 10],
    ];
    let res1 = booleanOperations.intersect(p1, p2);
    let res2 = booleanOperations.union(p1, p2);
    let res3 = booleanOperations.subtract(p1, p2);
    let res4 = booleanOperations.subtractRev(p1, p2);
    let res5 = booleanOperations.xor(p1, p2);
    expect(res1).to.eql([[[100,10],[80,30,50,10],[75,35],[100,10]]]);
    expect(res2).to.eql([[[50,60],[50,10],[80,30,100,10],[100,60],[75,35],[50,60]]]);
    expect(res3).to.eql([[[50,60],[50,10],[75,35],[50,60]]]);
    expect(res4).to.eql([[[100,60],[75,35],[100,10],[100,60]]]);
    expect(res5).to.eql([[[50,60],[50,10],[75,35],[100,10],[100,60],[75,35],[50,60]]]);
  });
  it('bezier2 partial overlap', function() {
    let p1 = [
      [90, 16.4],
      [70, 26, 50, 10],
      [50, 60],
      [90, 16.4],
    ];
    let p2 = [
      [60, 16.4],
      [80, 26, 100, 10],
      [100, 60],
      [60, 16.4],
    ];
    let res1 = booleanOperations.intersect(p1, p2);
    let res2 = booleanOperations.union(p1, p2);
    let res3 = booleanOperations.subtract(p1, p2);
    let res4 = booleanOperations.subtractRev(p1, p2);
    let res5 = booleanOperations.xor(p1, p2);
    expect(res1).to.eql([[[90,16.4],[75,23.6,60,16.4],[75,32.75],[90,16.4]]]);
    expect(res2).to.eql([[[50,60],[50,10],[55,14,60,16.4],[75,23.6,90,16.4],[95,14,100,10],[100,60],[75,32.75],[50,60]]]);
    expect(res3).to.eql([[[50,60],[50,10],[55,14,60,16.4],[75,32.75],[50,60]]]);
    expect(res4).to.eql([[[100,10],[100,60],[75,32.75],[90,16.4],[95,14,100,10]]]);
    expect(res5).to.eql([[[50,60],[50,10],[55,14,60,16.4],[75,32.75],[90,16.4],[95,14,100,10],[100,60],[75,32.75],[50,60]]]);
  });
  it('bezier2 contain', function() {
    let p1 = [
      [90, 16.4],
      [70, 26, 50, 10],
      [50, 60],
      [90, 16.4],
    ];
    let p2 = [
      [60, 16.4],
      [75, 23.6, 90, 16.4],
      [100, 60],
      [60, 16.4],
    ];
    let res1 = booleanOperations.intersect(p1, p2);
    let res2 = booleanOperations.union(p1, p2);
    let res3 = booleanOperations.subtract(p1, p2);
    let res4 = booleanOperations.subtractRev(p1, p2);
    let res5 = booleanOperations.xor(p1, p2);
    expect(res1).to.eql([[[90,16.4],[75,23.6,60,16.4],[75,32.75],[90,16.4]]]);
    expect(res2).to.eql([[[50,60],[50,10],[55,14,60,16.4],[75,23.6,90,16.4],[100,60],[75,32.75],[50,60]]]);
    expect(res3).to.eql([[[50,60],[50,10],[55,14,60,16.4],[75,32.75],[50,60]]]);
    expect(res4).to.eql([[[100,60],[75,32.75],[90,16.4],[100,60]]]);
    expect(res5).to.eql([[[50,60],[50,10],[55,14,60,16.4],[75,32.75],[90,16.4],[100,60],[75,32.75],[50,60]]]);
  });
  it('bezier2 contain complete', function() {
    let p1 = [
      [100, 10],
      [75, 30, 50, 10],
      [50, 60],
      [100, 10],
    ];
    let p2 = [
      [60, 16.4],
      [75, 23.6, 90, 16.4],
      [100, 60],
      [60, 16.4],
    ];
    let res1 = booleanOperations.intersect(p1, p2);
    let res2 = booleanOperations.union(p1, p2);
    let res3 = booleanOperations.subtract(p1, p2);
    let res4 = booleanOperations.subtractRev(p1, p2);
    let res5 = booleanOperations.xor(p1, p2);
    expect(res1).to.eql([[[90,16.4],[75,23.6,60,16.4],[76.07655502392345,33.92344497607655],[90.67164179104478,19.328358208955226],[90,16.4]]]);
    expect(res2).to.eql([[[50,60],[50,10],[55,14,60,16.4],[75,23.6,90,16.4],[95,14,100,10],[90.67164179104478,19.328358208955226],[100,60],[76.07655502392345,33.92344497607655],[50,60]]]);
    expect(res3).to.eql([[[100,10],[95,14,90,16.4],[90.67164179104478,19.328358208955226],[100,10]],[[50,60],[50,10],[55,14,60,16.4],[76.07655502392345,33.92344497607655],[50,60]]]);
    expect(res4).to.eql([[[100,60],[76.07655502392345,33.92344497607655],[90.67164179104478,19.328358208955226],[100,60]]]);
    expect(res5).to.eql([[[50,60],[50,10],[55,14,60,16.4],[76.07655502392345,33.92344497607655],[90.67164179104478,19.328358208955226],[90,16.4],[95,14,100,10],[90.67164179104478,19.328358208955226],[100,60],[76.07655502392345,33.92344497607655],[50,60]]]);
  });
  it('bezier3 contain complete', function() {
    let p1 = [
      [100, 10],
      [90, 20, 60, 20, 50, 10],
      [50, 60],
      [100, 10],
    ];
    let p2 = [
      [58.08, 14.8],
      [67.92, 18.4, 82.08, 18.4, 91.92, 14.8],
      [100, 60],
      [58.08, 14.8],
    ];
    let res1 = booleanOperations.intersect(p1, p2);
    let res2 = booleanOperations.union(p1, p2);
    let res3 = booleanOperations.subtract(p1, p2);
    let res4 = booleanOperations.subtractRev(p1, p2);
    let res5 = booleanOperations.xor(p1, p2);
    expect(res1).to.eql([[[91.92,14.8],[82.08,18.4,67.92,18.4,58.08,14.8],[75.94123048668503,34.05876951331497],[92.41741741741743,17.58258258258258],[91.92,14.8]]]);
    expect(res2).to.eql([[[50,60],[50,10],[52,12,54.8,13.6,58.08,14.8],[67.92,18.4,82.08,18.4,91.92,14.8],[95.2,13.600000000000003,98,12.000000000000002,100,10],[92.41741741741743,17.58258258258258],[100,60],[75.94123048668503,34.05876951331497],[50,60]]]);
    expect(res3).to.eql([[[100,10],[98,12.000000000000002,95.2,13.600000000000003,91.92,14.8],[92.41741741741743,17.58258258258258],[100,10]],[[50,60],[50,10],[52,12,54.8,13.6,58.08,14.8],[75.94123048668503,34.05876951331497],[50,60]]]);
    expect(res4).to.eql([[[100,60],[75.94123048668503,34.05876951331497],[92.41741741741743,17.58258258258258],[100,60]]]);
    expect(res5).to.eql([[[50,60],[50,10],[52,12,54.8,13.6,58.08,14.8],[75.94123048668503,34.05876951331497],[92.41741741741743,17.58258258258258],[91.92,14.8],[95.2,13.600000000000003,98,12.000000000000002,100,10],[92.41741741741743,17.58258258258258],[100,60],[75.94123048668503,34.05876951331497],[50,60]]]);
  });
});
